


### **Steps to Expire JWT Token in FastAPI**
1. **Install Dependencies**  
   Ensure you have `pyjwt` installed:
   ```bash
   pip install pyjwt fastapi
   ```

2. **Generate JWT Token with Expiration**
   You need to set the `exp` claim when encoding the token:
   ```python
   from datetime import datetime, timedelta
   import jwt

   SECRET_KEY = "your_secret_key"
   ALGORITHM = "HS256"

   def create_access_token(data: dict, expires_delta: timedelta = None):
       to_encode = data.copy()
       expire = datetime.utcnow() + (expires_delta or timedelta(minutes=5))  # Token expires in 5 minutes
       to_encode.update({"exp": expire})
       encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
       return encoded_jwt

   # Example usage
   token = create_access_token({"sub": "user123"})
   print(token)
   ```

3. **Verify Token Expiration**
   When decoding the token, PyJWT will raise an exception if the token is expired:
   ```python
   def verify_token(token: str):
       try:
           payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
           return payload
       except jwt.ExpiredSignatureError:
           return "Token has expired"
       except jwt.InvalidTokenError:
           return "Invalid token"

   # Example usage
   print(verify_token(token))
   ```

4. **Integrate with FastAPI**
   In FastAPI, you can use OAuth2 authentication and validate the token expiration:
   ```python
   from fastapi import FastAPI, Depends, HTTPException, status
   from fastapi.security import OAuth2PasswordBearer

   app = FastAPI()
   oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

   @app.get("/protected")
   async def protected_route(token: str = Depends(oauth2_scheme)):
       payload = verify_token(token)
       if isinstance(payload, str):  # If token is expired or invalid
           raise HTTPException(
               status_code=status.HTTP_401_UNAUTHORIZED,
               detail=payload
           )
       return {"message": "Access granted", "user": payload["sub"]}
   ```

### **How It Works**
- The token is generated with an expiration time (`exp` claim).
- When a request is made, the token is decoded.
- If the token is expired, an `ExpiredSignatureError` is raised, and access is denied.









### **What Does `tokenUrl="token"` Do?**
- It tells FastAPI that the authentication token should be obtained from the `/token` endpoint.
- When using FastAPI's **interactive API docs**, it automatically adds a login form for users to enter credentials.
- It is used in **OAuth2 password flow**, where users send their **username & password** to get a token.

### **Example Implementation**
#### **1. Define OAuth2PasswordBearer**
```python
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

# Specifies that tokens are obtained from /token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/protected")
async def protected_route(token: str = Depends(oauth2_scheme)):
    return {"message": "Access granted", "token": token}
```
- `Depends(oauth2_scheme)` ensures the endpoint requires authentication.
- The token is extracted from the `Authorization` header.

#### **2. Implement Token Generation**
```python
from fastapi import HTTPException, status
import jwt
from datetime import datetime, timedelta

SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"

def create_access_token(username: str):
    expire = datetime.utcnow() + timedelta(minutes=30)
    payload = {"sub": username, "exp": expire.timestamp()}
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

@app.post("/token")
async def login(username: str, password: str):
    if username != "admin" or password != "password":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")

    token = create_access_token(username)
    return {"access_token": token, "token_type": "bearer"}
```
- Users send their credentials to `/token` to receive a JWT token.
- The token is signed and includes an expiration time.

### **How It Works**
1. The client sends a **username & password** to `/token`.
2. The server validates the credentials and returns a **JWT token**.
3. The client includes this token in the `Authorization` header (`Bearer <token>`) for future requests.
4. FastAPI uses `OAuth2PasswordBearer` to extract and validate the token.

### **Summary**
✅ `tokenUrl="token"` tells FastAPI where tokens are obtained.  
✅ It enables **OAuth2 password flow** authentication.  
✅ It integrates with FastAPI's **interactive docs** for login.  
✅ Used in **JWT-based authentication** for securing endpoints.  








### **What is OAuth2PasswordBearer?**
- It is a **dependency** that extracts the token from the `Authorization` header.
- It is used in **OAuth2 password flow**, where users authenticate with a **username and password** to get a token.
- The token is then used for **subsequent requests** to access protected endpoints.

### **How It Works**
1. The client sends a **username and password** to the authentication endpoint (`/token`).
2. The server validates the credentials and returns a **JWT token**.
3. The client includes this token in the `Authorization` header (`Bearer <token>`) for future requests.
4. FastAPI uses `OAuth2PasswordBearer` to extract and validate the token.

### **Example Implementation**
#### **Step 1: Install Dependencies**
```bash
pip install fastapi uvicorn pyjwt
```

#### **Step 2: Define OAuth2PasswordBearer**
```python
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

# Define OAuth2PasswordBearer with the token URL
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/protected")
async def protected_route(token: str = Depends(oauth2_scheme)):
    return {"message": "Access granted", "token": token}
```
- `tokenUrl="token"` tells FastAPI where clients should request tokens.
- `Depends(oauth2_scheme)` ensures the endpoint requires authentication.

#### **Step 3: Implement Token Generation**
```python
import jwt
from datetime import datetime, timedelta

SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"

def create_access_token(username: str):
    expire = datetime.utcnow() + timedelta(minutes=30)
    payload = {"sub": username, "exp": expire}
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

@app.post("/token")
async def login(username: str, password: str):
    # Validate user credentials (dummy check)
    if username != "admin" or password != "password":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    
    token = create_access_token(username)
    return {"access_token": token, "token_type": "bearer"}
```
- Users send their credentials to `/token` to receive a JWT token.
- The token is signed and includes an expiration time.

#### **Step 4: Verify Token in Protected Routes**
```python
def verify_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload["sub"]
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")

@app.get("/user")
async def get_user(token: str = Depends(oauth2_scheme)):
    username = verify_token(token)
    return {"username": username}
```
- The token is extracted using `Depends(oauth2_scheme)`.
- It is validated using `jwt.decode()`, ensuring it is not expired or tampered with.

### **Summary**
- `OAuth2PasswordBearer` extracts the token from requests.
- Clients authenticate via `/token` and receive a JWT token.
- Protected routes use `Depends(oauth2_scheme)` to enforce authentication.
- Tokens are validated before granting access.








In FastAPI, **OAuth2** and **HTTP Bearer** are related but serve different purposes in authentication.

### **1. OAuth2**
- **OAuth2** is an authentication framework that allows users to securely log in and authorize access to resources.
- It supports multiple flows, such as **password-based authentication**, **authorization code flow**, and **client credentials**.
- FastAPI provides built-in support for OAuth2 using `OAuth2PasswordBearer`, which is commonly used for **token-based authentication**.

### **2. HTTP Bearer**
- **HTTP Bearer** is a specific authentication scheme where a token is sent in the `Authorization` header.
- It is commonly used in **OAuth2** implementations to pass access tokens.
- FastAPI provides `HTTPBearer`, which validates the presence of a **Bearer token** in requests.

### **Key Differences**
| Feature | OAuth2 | HTTP Bearer |
|---------|--------|-------------|
| Purpose | Authentication framework | Token authentication scheme |
| Usage | Handles login, token issuance, and authorization | Validates token presence in requests |
| FastAPI Implementation | `OAuth2PasswordBearer(tokenUrl="token")` | `HTTPBearer()` |
| Token Type | JWT or OAuth2 tokens | Any bearer token |

### **Example Usage**
#### **OAuth2PasswordBearer (OAuth2)**
```python
from fastapi import FastAPI, Depends
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/protected")
async def protected_route(token: str = Depends(oauth2_scheme)):
    return {"message": "Access granted", "token": token}
```
- Extracts the token from the `Authorization` header.
- Used in OAuth2 password flow.

#### **HTTPBearer**
```python
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

security = HTTPBearer()

@app.get("/secure")
async def secure_route(credentials: HTTPAuthorizationCredentials = Depends(security)):
    return {"message": "Token received", "token": credentials.credentials}
```
- Validates that a **Bearer token** is present.
- Can be used for **non-OAuth2** authentication.

### **Summary**
- **OAuth2** is a full authentication framework that issues and manages tokens.
- **HTTP Bearer** is a simple authentication scheme that validates token presence.
- **OAuth2PasswordBearer** is commonly used in FastAPI for OAuth2 authentication.
- **HTTPBearer** is useful when you just need to check if a token exists.

